--------------------------------------------------------------------------
The subprocess module in Python provides a number of functions for interacting with subprocesses. Two of the most common functions are Popen() and call().
Popen() is a more general function that allows you to start a new process and interact with its standard input, output, and error streams. call() is a simpler function that takes a command and arguments and runs it, waiting for it to finish before returning.
Here is a table that summarizes the key differences between Popen() and call():
Feature
Popen()
call()
Blocks
No
Yes
Returns
A Popen object
The exit status of the subprocess
Use cases
When you need to interact with the subprocess while it's running
When you just need to run a command and wait for it to finish
Here are some examples of how to use Popen() and call():
import subprocess

# Start a new process and interact with its standard input, output, and error streams
p = subprocess.Popen(["python", "my_script.py"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Write some data to the subprocess's standard input
p.stdin.write(b"Hello, world!")

# Read some data from the subprocess's standard output
output = p.stdout.read()

# Wait for the subprocess to finish
p.wait()

# Print the output of the subprocess
print(output)

# Run a command and wait for it to finish
subprocess.call(["python", "my_script.py"])
Use code with caution.
Learn more
In general, Popen() is more flexible than call(), but it can also be more complex to use. If you just need to run a command and wait for it to finish, then call() is a good choice. If you need to interact with the subprocess while it's running, then you should use Popen().
------------------------------------------------------------------------------------------------
this is for test
----------------------------------------
import subprocess
for i in range(1,11):
	dir_name = f"test{i}"
	subprocess.call(["mkdir" ,dir_name])
# to create the directories
-----------------------------------------------------
# remove only directories

import os
import shutil
for i in os.listdir():
	if os.path.isdir(i):
		shutil.rmtree(i)
-------------------------------------------------------------------------------------------------------------------------------------

https://opensource.com/article/19/8/ops-tasks-ansible -- to check the ansible 
https://opensource.com/tags/ansible -- ansible
https://www.middlewareinventory.com/blog/category/ansible/
----------------------------------------------------------------
ansible to work with only pem files 
https://www.youtube.com/watch?v=65XXE0DMxcU

üëã Hey, I am a DevOps engineer working remotely in a US based company.



‚Ä¢
https://www.youtube.com/watch?v=89ymSXkGwhE
2Ô∏è‚É£ https://www.youtube.com/watch?v=Z7GxBf6us8Y
3Ô∏è‚É£ https://www.youtube.com/watch?v=29TwUCHILhM
4Ô∏è‚É£ https://www.youtube.com/watch?v=cQxg3Dnteyc

If you want to master DevOps, checkout the course link in bio . In the course I have tried to explain everything in detail and in a very fun way with project based learning.

---------------------------------------------------------------------------------------------------------------------------------
in the .gitignore file added as *.sh and even though sh is showing in the remote repo


If the files were already staged, you need to unstage them using git rm --cached <file> and then commit the changes.
If the files were already committed, you need to remove them from version control using git rm --cached <file> and then commit the changes.


How to find all PDF files in directories and their subdirectories
ls | grep .pdf
