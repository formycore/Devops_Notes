------------
- ansible-vault encrypt_string '<password>' --name '<ansible_password>' 
- create a group_vars directory in the root of the project
- create a file name all.yml as the name should match the inventory file name like all or win or test
- for example if we have hostt.ini file has 
cat hosts.ini 
[win]
<ip address>

[win:vars]
username = 
all other 
- in the group_vars directory create a file name win.yml and the output of the command [ansible-vault encrypt_string '<password>' --name '<ansible_password>']
example

---
nsible_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          63616463336632663330323262323235343066633461353666653461396662613763343763653534
          31373866353732366366373533xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

-------------------------------
- in the hosts file file remove the password
- Now run the ansible playbook with the command
ansible-playbook -i hosts.ini playbook.yml --ask-vault-pass
- enter the password
- if you want to run the playbook without asking for the password you can use the command
- copy the ansible.cfg from /etc/ansible/ansible.cfg to the root of the project
- in the ansible.cfg file 
  [defaults]
  vault_password_file = /path/to/vault_password_file
- create a file name vault_password_file in the root of the project
- add the password in the file
- vi .vault_password_file
- in .vault_password_file add the password
- or we can paste the .vault_password_file in the /etc/ directory
- in the ansible.cfg file uncomment the line #vault_password_file = /etc/vault_password_file
- now run the command
ansible-playbook -i hosts.ini playbook.yml
- it will not ask for the password
