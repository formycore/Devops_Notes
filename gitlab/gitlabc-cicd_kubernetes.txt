# using the gitlab container image
--------------------------------------------------------------------------------------------------------------------------------------
```
[ec2-user@master login-app]$ kubectl run login-app --image=registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1 --dry-run=client -o yaml > login-app.yml
[ec2-user@master login-app]$ cat login-app.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: login-app
  name: login-app
spec:
  containers:
  - image: registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1
    name: login-app
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
```
--------------------------------------------------------------------------------------------------------------------------------------
# create a secret to pull the image from the gitlab container registry
[ec2-user@master login-app]$ kubectl create secret --help
Create a secret with specified type.

 A docker-registry type secret is for accessing a container registry.

 A generic type secret indicate an Opaque secret type.

 A tls type secret holds TLS certificate and its associated key.

Available Commands:
  docker-registry   Create a secret for use with a Docker registry
  generic           Create a secret from a local file, directory, or literal value
  tls               Create a TLS secret

Usage:
  kubectl create secret (docker-registry | generic | tls) [options]

Use "kubectl create secret <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
[ec2-user@master login-app]$ kubectl create secret docker-registry --help
Create a new secret for use with Docker registries.

        Dockercfg secrets are used to authenticate against Docker registries.

        When using the Docker command line to push images, you can authenticate to a given registry
by running:
        '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD
--email=DOCKER_EMAIL'.

 That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull'
commands to authenticate to the registry. The email address is optional.

        When creating applications, you may have a Docker registry that requires authentication.  In
order for the
        nodes to pull images on your behalf, they must have the credentials.  You can provide this
information
        by creating a dockercfg secret and attaching it to your service account.

Examples:
  # If you do not already have a .dockercfg file, create a dockercfg secret directly
  kubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER
--docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL

  # Create a new secret named my-secret from ~/.docker/config.json
  kubectl create secret docker-registry my-secret
--from-file=.dockerconfigjson=path/to/.docker/config.json

Options:
    --allow-missing-template-keys=true:
        If true, ignore any errors in templates when a field or map key is missing in the
        template. Only applies to golang and jsonpath output formats.

    --append-hash=false:
        Append a hash of the secret to its name.

    --docker-email='':
        Email for Docker registry

    --docker-password='':
        Password for Docker registry authentication

    --docker-server='https://index.docker.io/v1/':
        Server location for Docker registry

    --docker-username='':
        Username for Docker registry authentication

    --dry-run='none':
        Must be "none", "server", or "client". If client strategy, only print the object that
        would be sent, without sending it. If server strategy, submit server-side request without
        persisting the resource.

    --field-manager='kubectl-create':
        Name of the manager used to track field ownership.

    --from-file=[]:
        Key files can be specified using their file path, in which case a default name will be
        given to them, or optionally with a name and file path, in which case the given name will
        be used.  Specifying a directory will iterate each named file in the directory that is a
        valid secret key.

    -o, --output='':
        Output format. One of: (json, yaml, name, go-template, go-template-file, template,
        templatefile, jsonpath, jsonpath-as-json, jsonpath-file).

    --save-config=false:
        If true, the configuration of current object will be saved in its annotation. Otherwise,
        the annotation will be unchanged. This flag is useful when you want to perform kubectl
        apply on this object in the future.

    --show-managed-fields=false:
        If true, keep the managedFields when printing objects in JSON or YAML format.

    --template='':
        Template string or path to template file to use when -o=go-template, -o=go-template-file.
        The template format is golang templates
        [http://golang.org/pkg/text/template/#pkg-overview].

    --validate='strict':
        Must be one of: strict (or true), warn, ignore (or false).              "true" or "strict" will use a
        schema to validate the input and fail the request if invalid. It will perform server side
        validation if ServerSideFieldValidation is enabled on the api-server, but will fall back
        to less reliable client-side validation if not.                 "warn" will warn about unknown or
        duplicate fields without blocking the request if server-side field validation is enabled
        on the API server, and behave as "ignore" otherwise.            "false" or "ignore" will not
        perform any schema validation, silently dropping any unknown or duplicate fields.

Usage:
  kubectl create secret docker-registry NAME --docker-username=user --docker-password=password
--docker-email=email [--docker-server=string] [--from-file=[key=]source]
[--dry-run=server|client|none] [options]

Use "kubectl options" for a list of global command-line options (applies to all commands).
--------------------------------------------------------------------------------------------------------------------------------------
# created the secret
[ec2-user@master login-app]$ kubectl create secret docker-registry app-secret  --docker-server=registry.gitlab.com --docker-username=cicd --docker-password=<token> --dry-run=client  -o yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJfdsj;lsajfa;ldsjfa;sldjfahdXRocyI6eyJyZWdpc3RyeS5naXRsYWIuY29tIjp7InVzZXJuYW1lIjoiY2ljZCIsInBhc3N3b3JkIjoiZ2xwYXQtRzM1cXFkVFJvWUVVenk0enhvcDEiLCJhdXRoIjoiWTJsalpEcG5iSEJoZEMxSE16VnhjV1JVVW05WlJWVjZlVFI2ZUc5d01RPT0ifX19
kind: Secret
metadata:
  creationTimestamp: null
  name: app-secret
type: kubernetes.io/dockerconfigjson
--------------------------------------------------------------------------------------------------------------------------------------
[ec2-user@master login-app]$ kubectl apply -f apps-secret.yml
secret/app-secret created
[ec2-user@master login-app]$ kubectl get secrets
NAME         TYPE                             DATA   AGE
app-secret   kubernetes.io/dockerconfigjson   1      33s
db-secret    Opaque                           1      11d
[ec2-user@master login-app]$ vi login-app.yml
[ec2-user@master login-app]$ vi login-app.yml
[ec2-user@master login-app]$ kubectl apply -f login-app.yml
pod/login-app created
[ec2-user@master login-app]$ kubectl get pods
NAME        READY   STATUS             RESTARTS         AGE
login-app   1/1     Running            0                8s

[ec2-user@master login-app]$ kubectl get pods
NAME        READY   STATUS    RESTARTS   AGE
login-app   1/1     Running   0          35s
[ec2-user@master login-app]$ kubectl create service --help
Create a service using a specified subcommand.

Aliases:
service, svc

Available Commands:
  clusterip      Create a ClusterIP service
  externalname   Create an ExternalName service
  loadbalancer   Create a LoadBalancer service
  nodeport       Create a NodePort service

Usage:
  kubectl create service [flags] [options]

Use "kubectl create service <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
[ec2-user@master login-app]$ kubectl create service nodeport --help
Create a NodePort service with the specified name.

Examples:
  # Create a new NodePort service named my-ns
  kubectl create service nodeport my-ns --tcp=5678:8080

Options:
    --allow-missing-template-keys=true:
        If true, ignore any errors in templates when a field or map key is missing in the
        template. Only applies to golang and jsonpath output formats.

    --dry-run='none':
        Must be "none", "server", or "client". If client strategy, only print the object that
        would be sent, without sending it. If server strategy, submit server-side request without
        persisting the resource.

    --field-manager='kubectl-create':
        Name of the manager used to track field ownership.

    --node-port=0:
        Port used to expose the service on each node in a cluster.

    -o, --output='':
        Output format. One of: (json, yaml, name, go-template, go-template-file, template,
        templatefile, jsonpath, jsonpath-as-json, jsonpath-file).

    --save-config=false:
        If true, the configuration of current object will be saved in its annotation. Otherwise,
        the annotation will be unchanged. This flag is useful when you want to perform kubectl
        apply on this object in the future.

    --show-managed-fields=false:
        If true, keep the managedFields when printing objects in JSON or YAML format.

    --tcp=[]:
        Port pairs can be specified as '<port>:<targetPort>'.

    --template='':
        Template string or path to template file to use when -o=go-template, -o=go-template-file.
        The template format is golang templates
        [http://golang.org/pkg/text/template/#pkg-overview].

    --validate='strict':
        Must be one of: strict (or true), warn, ignore (or false).              "true" or "strict" will use a
        schema to validate the input and fail the request if invalid. It will perform server side
        validation if ServerSideFieldValidation is enabled on the api-server, but will fall back
        to less reliable client-side validation if not.                 "warn" will warn about unknown or
        duplicate fields without blocking the request if server-side field validation is enabled
        on the API server, and behave as "ignore" otherwise.            "false" or "ignore" will not
        perform any schema validation, silently dropping any unknown or duplicate fields.

Usage:
  kubectl create service nodeport NAME [--tcp=port:targetPort] [--dry-run=server|client|none]
[options]

Use "kubectl options" for a list of global command-line options (applies to all commands).
[ec2-user@master login-app]$ kubectl create service nodeport login-svc --tcp=80:8080 --dry-run=client -o yaml >> login-svc.yml
[ec2-user@master login-app]$ cat login-svc.yml
--------------------------------------------------------------------------------------------------------------------------------------
# this file has some errors 
# targetport should not be 8080 it should be 80
# for selector section remove app:login-svc and add run: login-app
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: login-svc
  name: login-svc
spec:
  ports:
  - name: 80-8080
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: login-svc
  type: NodePort
status:
  loadBalancer: {}
######################################################################################################################################
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: login-svc
  name: login-svc
spec:
  ports:
  - name: login-svc
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: login-app
  type: NodePort
status:
  loadBalancer: {}
######################################################################################################################################
--------------------------------------------------------------------------------------------------------------------------------------
[ec2-user@master login-app]$ kubectl apply -f login-svc.yml
service/login-svc created
[ec2-user@master login-app]$ kubectl get svc
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE
flask-app-nodeport   NodePort    10.99.75.114    <none>        5000:30007/TCP    18d
kubernetes           ClusterIP   10.96.0.1       <none>        443/TCP           26d
login-svc            NodePort    10.98.21.95     <none>        80:31587/TCP      6s
mongo-svc            NodePort    10.101.80.11    <none>        27017:32001/TCP   26d
mysql-svc            ClusterIP   10.101.24.179   <none>        3306/TCP          11d
[ec2-user@master login-app]$ kubectl get pods -o wide
NAME        READY   STATUS    RESTARTS   AGE     IP          NODE    NOMINATED NODE   READINESS GATES
login-app   1/1     Running   0          3m22s   10.36.0.5   nodea   <none>           <none>
[ec2-user@master login-app]$ kubectl describe pod login-app
Name:             login-app
Namespace:        default
Priority:         0
Service Account:  default
Node:             nodea/172.31.86.123
Start Time:       Sat, 07 Dec 2024 18:12:36 +0000
Labels:           run=login-app
Annotations:      <none>
Status:           Running
IP:               10.36.0.5
IPs:
  IP:  10.36.0.5
Containers:
  login-app:
    Container ID:   containerd://36eb345f8cb1e2c6a05dfd806d4904d8cd428a02fee4dc8adea94fbcbc330505
    Image:          registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1
    Image ID:       registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo@sha256:0d0f0d757e84eec68fd25d4141451542a61fd294e3a767e9d9ad624acc753f1e
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Sat, 07 Dec 2024 18:12:41 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pqmwf (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True
  Initialized                 True
  Ready                       True
  ContainersReady             True
  PodScheduled                True
Volumes:
  kube-api-access-pqmwf:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  4m18s  default-scheduler  Successfully assigned default/login-app to nodea
  Normal  Pulling    4m18s  kubelet            Pulling image "registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1"
  Normal  Pulled     4m14s  kubelet            Successfully pulled image "registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1" in 4.249s (4.249s including waiting)
  Normal  Created    4m14s  kubelet            Created container login-app
  Normal  Started    4m14s  kubelet            Started container login-app
[ec2-user@master login-app]$ kubectl stop pod login-app
error: unknown command "stop" for "kubectl"

Did you mean this?
        top
[ec2-user@master login-app]$ cat login-app.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: login-app
  name: login-app
spec:
  containers:
  - image: registry.gitlab.com/awssandeepchary1/gitlab-kube-inte-sample-repo/demo:v1
    name: login-app
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  imagePullSecrets:
    - name: app-secret
status: {}

[ec2-user@master login-app]$ vi login-svc.yml
[ec2-user@master login-app]$ kubectl apply -f  login-svc.yml
service/login-svc configured
[ec2-user@master login-app]$ kubectl describe svc login-svc
Name:                     login-svc
Namespace:                default
Labels:                   app=login-svc
Annotations:              <none>
Selector:                 run=login-app
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.98.21.95
IPs:                      10.98.21.95
Port:                     login-svc  80/TCP
TargetPort:               80/TCP
NodePort:                 login-svc  31587/TCP
Endpoints:                10.36.0.5:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
[ec2-user@master login-app]$
