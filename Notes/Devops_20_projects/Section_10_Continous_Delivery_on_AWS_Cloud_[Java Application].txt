Section_10_Continous_Delivery_on_AWS_Cloud_[Java Application]
	- Introduction
		- continous delivery AWS
			- scenario
				- Product development team
				- Developers make code changes
				- These commits need to build & Test
				- Running short on operations
				- package/s.w/artifact deployment on server
				- Software testing/Integration testing after deployment
			
			- Problem
				- Developers are not euipped with Ops knowledge
				- Need for the hire Ops team
				- Outsource
				- Dependency on ops team
			
			- Solution:
				- PASS & SAAS  cloud services
				- Disposable Environment
				- Automate CI/CD process
				- Build,Test,Deploy & Test Every commit
				
			- AWS services
				- Code commit (version control system)
				- Code Artifact (maven repo for dependency)
				- Code Build (Build service from AWS)(for s.w testing)
				- Code Deploy ( Artifact deployment service )
				- sonarcloud
				- checkstyle
				- selenium testing
				- Beanstalk
				- RDS
				- Code pipeline
			
			- Compare
				AWS code commit    --- Github
				AWS code artifact  --- Nexus sonatype
				AWS code build 	   --- Jenkins Job
				Sonarcloud 		   --- Sonarqube
				aws code pipeline  --- jenkins pipeline
				Beanstalk          --- Tomcat vm
				RDS                --- MYSQL on vm
			
			- Flow of Execution
				- login to aws account
				- code commit
					- create code commit repo
					- sync it with local repo
				- code artifact 
					- Create repo
					- update settings.xml file in the source code top level directory
					- update pom.xml file with repo details
					- Generate token and store in SSM Parameter store
				- sonar setup
					- create sonarcloud account
					- Generate token and store in ssm Parameter store
					- Create build project
					- update codebuild role to SsmParameterStore
				- Create notification for sns or slack
				- Build project
					- create variable in ssm => Parameterstore
					- create build project
				- create pipeline
					- codecommit
					- Testcode
					- Build
					- Deploy to s3 bucket
				- create beanstalk & RDS
				- update RDS sec grp
				- Deploy DB in RDS
				- switch to cd-aws branch
				- update settings.xml & pom.xml
				- create another build job to create artifact with buildspecs in cd-aws
				- create deploy job to beanstalk
				- create build job for s.w testing
				- update pipeline
					- code commit
					- Test code
					- Build & store
					- Deploy to s3 bucket
					- Build & release
					- Deploy to beanstalk
					- Build job for selenium tests
					- upload result to s3
				- Test pipeline
			
			
			- Artitecture of CD pipeline
				- after commit 
				- aws code commit
				- aws code build (review)
					- dependency download from code artifact
				- aws code build (build)
					- dependency download from code artifact
				- once artifact created we are going to store under s3 bucket
				
				- deployment job
					- aws beanstalk
					- rds 
####################################################################################################################

066 b. ContinuousIntegration
	- search for code commit
		- codecommit
			- Create repository (Name it: sam-profile-code-repo)
			- create
	- IAM
		- add user
		- username: sam-code-admin
		- programmatic access
		- attach policy
			- create policy
				- service: codecommit
				-  select (ALL)
			- Resources: Specific
				- region : us-east-1
				  accoutnname:
				  repo name: sam-profile-code-repo
			- creat policy
			- refresh the icon
			- check for the policy name
			- create user
			- under the user delete the access key
			- we have upload ssh public key
			- from local machine
			- gitbash
			- ssh-keygen
			- name-it with the same location
			- c:/users/san/.ssh/sam_code_commit_rsa
			$ cd .ssh
			$ cat sam_code_commit_rsa.pub
			- copy it store it 
			- paste it in upload ssh public key
			- now create a config file
			- ssh will use this config to find the location of the ssh keys and username
			$ vi config
				Host git-codecommit.*.amazonaws.com
					User: ssh-keyid
					IdentityFile: ~/.ssh/sam_code_commit_rsa
				:wq!
			$ chmod 600 config
			$ ssh git-codecommit.us-east-2.amazonaws.com
			- clone url
			- clone ssh
			$ git clone <clone ssh>
			- change the branch to ci-aws
			$ cat .git/config
			$ git checkout master
			$ git branch -a | grep -v HEAD | cut -d '/' -f3 | grep -v master
			$ git branch -a | grep -v HEAD | cut -d '/' -f3 | grep -v master > /tmp/branches
			$ for i in `cat /tmp/branches`: do echo $i:done
			$ clear
			$ for i in `cat /tmp/branches`: do git checkout $i: done
			$ git checkout -a
			
			$ git remote rm origin
			$ git remote add origin ssh://<clone url from the codecommit page>
			$ cat .git/config
			$ git push origin --all
			- under the code commit repository choose : master branch


		- Artifact:
			- create repo
			- Name: sam-maven-repo
			- public upstream : maven-store
			- This aws
			- Domain name: samantha
			- create repo
			- click on repository
			- click on maven-repo
			- view connection instructions
			- select pkg manager: mvn
			- to run the authentication purpose we need iam user
			
			- IAM
			- user
			- add user
			- username: sam-cart-admin
			- programmatic access
			- policy
				- code artifactadminaccess
			$ aws configure
			- copy the code from Manual step 1
			$ echo $CODEARTIFACT_AUTH_TOKEN
			- change settings.xml file
			$ git checkout ci-aws
			$ vi settings.xml
				<username>aws</username>
				<profile>
					<url> COPY THE URL FROM MANUAL STEP 2/ <\url>
				<\profile>
				<mirror>
					<name> CHANGE ONLY THE DOMAIN NAME TO THE samantha <\name>
					<url> CHANGE THE URL FROM MANUAL STEP 4 /<\url>
				<\mirror>
			$ vi pom.xml
				<url> CHANGE THE URL FROM MANUAL STEP 4 /<\url>
			$ git add .
			$ git commit -m "updated pom and settings"
			$ git push origin ci-aws
			
			- goto sonarcloud.io
			- login
			- click on user
			- my account
			- security
			- Generate Token
			- sam-sonar
			- copy the token
			- paste it some where safe
			- from the + symbol 
			- Analyse new project
			- crete project manually
			- Project Key: sam-repo
			- public
			- setup
			- note the sonar token,project key,https://sonarcloud.io,organization
			
			
			- goto ssm
			- create parameter
			- Name: Organization
			- Type: string
			- value: organization saved one
			- create parameter
			
			- create parameter
			- Name: HOST
			- Type: string
			- value: https://sonarcloud.io
			- create parameter
				
			- create parameter
			- Name: Project
			- Type: string
			- value: sam-repo
			- create parameter

			- create parameter
			- Name: sonartoken
			- Type: secure string
			- value: paste the sonar token 
			- create parameter
				

			- create parameter
			- Name: codeartifact-token
			- Type: secure string
			- value: paste the codeartifact-token (from token that generated from the MANUAL step 1)
			- create parameter


			- Build
				- Create codebuild
				- project name: sam-code-analysis
				- repo: sam-code-repo
				- reference type: Branch
				- Branch choose: ci-aws
				- Operating system: ubuntu
				- runtime: standard
				- image: 3.0
				- Role name: (last put some number)
				- insert build command:
				$ copy the content in aws-files/sonar-buildspecs.yml
				- paste in the build commands
					- login ; sonartoken
			- logs:
				- cloudwatch
				- Group name: sam-nvir-buildlogs
				- Stream name: sonarbuildjob
			- crete build
			
			
			- edit env section
				- IAM
				- roles
				- search the role
				- attach policy
				- create policy
					- service: system manager
					- action: list
						- Describe parameter
					- action: Read
						- Describe document parameters
						- get parameter
						- get parameters
						- get parameter by history
						- get parameter by path
						
						- name: sonar-parameter-access
						- create policy
				- attach policy
				- start build
				- it will take some time
				
				
			- goto sonarcloud
			- quality gates
			- create
			- name: sam-gates
			- Quality gates fail when:
				- Bugs
				- 50
			- Administration
			- quality gate
			- sam-gates
			
			- goto build project
			- project name: sam-build-artifact
			- source code : aws code commit
			- repo: sam-code-repo
			- branch: ci-aws
			- os: ubuntu
			- runtimes: standard
			- role name: (last add some number)
			- insert build commands
			- switch to editor
			- cat aws-files/build_buildspecfiles.yml
			- copy all the content
			- paste under the insert build commands
			-logs:
				- Group Name:
					- sam-nvir-buildlogs
				- stream name:
					- sonarbuildjob
			- edit env
				- copy the role name
				- attach : sonar-parameter-access
				- this role
				- start build
				
			- pipeline
				- create pipeline
				- pipeline name: sam-ci-pipeline
				- next
				- source provider: aws code commit
				- repository name: sam-code-repo
				- branch name: ci-aws
				- next
			- Build optional:
				- aws code commit
				- us east
				- project name: sam-build-artifact
				- next
			- Deploy :
				- skip deploy stage
			- creat pipeline
			
			- edit the pipeline
			- add stage
				- stage name: Test
			- add actions group
				- Action name: sonar-code-analysis
			- Action provider
				- aws code build
			- input artifact
				- sourceartifact
			- Project Name
				- sam-build
				- single build
			- done
			- done
			
			- create s3 bucket
			- aws s3 mb sam-12-build-artifact
			- create
			- create folder
				- pipeline-artifact
				- saved
			
			- under the Edit: Build
			- Add stage
				- stage name: Deploy
			- add action group
				- action name: Deploy-to-s3
			- Action provider
				- amazon s3
			- input artifact
				- build artifact
			- bucket
				- sam-12-build-artifact
			- s3 object key
				- pipeline-artifact
			- Extract file before deploy
			- done
			- done
		- save the pipeline
		- in the Readme.md file in the change some thing
		$ git commit -m "added files"
		$ git push origin ci-aws
			
			

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				